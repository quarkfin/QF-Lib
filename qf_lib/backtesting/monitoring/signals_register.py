#     Copyright 2016-present CERN â€“ European Organization for Nuclear Research
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
from datetime import datetime
from typing import List, Tuple, Optional

from qf_lib.backtesting.alpha_model.signal import Signal
from qf_lib.containers.dataframe.qf_dataframe import QFDataFrame
from qf_lib.containers.futures.future_tickers.future_ticker import FutureTicker


class SignalsRegister:
    """
    Used to save signals processed by the Position Sizer and to be able to later to analyze all signals generated by
    the model and to present them in a readable form.
    """
    def __init__(self):
        self._signals_data = []  # type: List[Tuple[datetime, str, Signal]]
        self._initial_risk = None  # type: Optional[float]

    def set_initial_risk(self, initial_risk: float):
        self._initial_risk = initial_risk

    def get_initial_risk(self):
        return self._initial_risk

    def save_signals(self, signals: List[Signal], date: datetime):
        """
        Add the provided signals to the list of all cached signals.
        """
        def generate_ticker_name(signal: Signal) -> str:
            ticker = signal.ticker
            ticker_str = ticker.name if isinstance(ticker, FutureTicker) else ticker.as_string()
            model_name = "" if signal.alpha_model is None else signal.alpha_model.__class__.__name__
            return ticker_str + "@" + model_name

        self._signals_data.extend(
            ((date, generate_ticker_name(signal), signal) for signal in signals)
        )

    def get_signals(self) -> QFDataFrame:
        """
        Returns a QFDataFrame with all generated signals. The columns names consist of ticker names (in the following
        form: NameOfTicker@Model) and the rows are indexed by the time of signals generation (Signal objects do not
        store the timestamp).

        Returns
        --------
        QFDataFrame
            QFDataFrame with all generated signals
        """
        df = QFDataFrame.from_records(self._signals_data, columns=["Date", "Ticker", "Signal"])

        # Modify the dataframe to move all signals for certain tickers to separate columns and set the index to date
        df = df.pivot_table(index='Date', columns='Ticker', values='Signal', aggfunc='first')
        return QFDataFrame(df)
